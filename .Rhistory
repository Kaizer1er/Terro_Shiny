knitr::opts_chunk$set(echo = TRUE)
# À vous de jouer
dvf <- st_read("C:/Users/kaize/OneDrive/Bureau/Master2_GEODYM/Webmapping/Seance_3/dvf_normandie_2014-2023.gpkg")
library(sf)
# À vous de jouer
dvf <- st_read("C:/Users/kaize/OneDrive/Bureau/Master2_GEODYM/Webmapping/Seance_3/dvf_normandie_2014-2023.gpkg")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/kaize/OneDrive/Bureau/Master2_GEODYM/Indicateurs")
#install.packages(c("FactoMineR", "factoextra"))
#install.packages("RColorBrewer")
#install.packages("cartography")
#install.packages("classint")
#install.packages("ggplot2")
#install.packages("corrplot","sf")
#install.packages("gtsummary")
library("dplyr")
library("FactoMineR")
library("factoextra")
library ("corrplot")
library ("readxl")
library ("cartography")
library("rgdal")
library("classInt")
library("RColorBrewer")
library("ggplot2")
library("sf")
library("gtsummary")
install.packages("gtsummary")
library(gtsummary)
knitr::opts_chunk$set(echo = TRUE)
library("gtsummary")
library(glue)
datadeps2 <- read.csv2("datadeps2.csv", encoding = "UTF-8" )
View(datadeps2)
head(datadeps2)
datadeps_active<-datadeps2[1:96,2:10]
rownames(datadeps_active) <- datadeps_active$LIBGEO #On met le code départemental en intitulé du nom de ligne#
select (datadeps2, 3:10) %>% slice(1:96)%>% tbl_summary()
library(gtsummary)
library(gtable)
library(gt)
library(sf)
library(dplyr)
library(dbplyr)
select (datadeps2, 3:10) %>% slice(1:96)%>% tbl_summary()
select (datadeps2, 3:10) %>% slice(1:96)%>% tbl_summary()
select (datadeps2, 3:10) %>% slice(1:96)%>% tbl_summary()
select (datadeps2, 3:10) %>% slice(1:96)%>% tbl_summary()
select (datadeps2, 3:10) %>% slice(1:96)%>% tbl_summary()
select (datadeps2, 3:10) %>% slice(1:96)%>% tbl_summary()
library(gtsummary)
select (datadeps2, 3:10) %>% slice(1:96)%>% tbl_summary()
install.packages("gtsummary")
knitr::opts_chunk$set(echo = TRUE)
library("gtsummary")
#install.packages(c("FactoMineR", "factoextra"))
#install.packages("RColorBrewer")
#install.packages("cartography")
#install.packages("classint")
#install.packages("ggplot2")
#install.packages("corrplot","sf")
#install.packages("gtsummary")
library("dplyr")
library("FactoMineR")
library("factoextra")
library ("corrplot")
library ("readxl")
library ("cartography")
library("rgdal")
library("classInt")
library("RColorBrewer")
library("ggplot2")
library("sf")
library("gtsummary")
library(gtsummary)
library("gtsummary")
install.packages("gtsummary")
install.packages("gtsummary")
install.packages("C:/Users/kaize/Downloads/gtsummary_2.0.3.zip", repos = NULL, type = "win.binary")
knitr::opts_chunk$set(echo = TRUE)
library("gtsummary")
install.packages("glue")
install.packages("C:/Users/kaize/Downloads/glue_1.8.0.zip", repos = NULL, type = "win.binary")
library(gtsummary)
knitr::opts_chunk$set(echo = TRUE)
library("gtsummary")
library("sf")
library("gtsummary")
library(gtsummary)
install.packages("glue")
library(gtsummary)
install.packages("glue")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("glue")
library(gtsummary)
library(gtsummary)
library(glue)
library("gtsummary")
#install.packages(c("FactoMineR", "factoextra"))
#install.packages("RColorBrewer")
#install.packages("cartography")
#install.packages("classint")
#install.packages("ggplot2")
#install.packages("corrplot","sf")
#install.packages("gtsummary")
library("dplyr")
library("FactoMineR")
library("factoextra")
library ("corrplot")
library ("readxl")
library ("cartography")
library("rgdal")
library("classInt")
library("RColorBrewer")
library("ggplot2")
library("sf")
library("gtsummary")
library(abind)
library(mapsf)
library(gtsummary)
library(gt)
detach("package:gt", unload = TRUE)
library(gtable)
library("gtsummary")
library("gtsummary")
library("gtsummary")
library("gtsummary")
library("gtsummary")
library("gtsummary")
library("gtsummary")
library("gtsummary")
library("gtsummary")
install.packages("C:/Users/kaize/Downloads/glue_1.8.0.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/kaize/Downloads/glue_1.8.0.zip", repos = NULL, type = "win.binary")
detach("package:gtable", unload = TRUE)
install.packages("C:/Users/kaize/Downloads/glue_1.8.0.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/kaize/Downloads/glue_1.8.0.zip", repos = NULL, type = "win.binary")
install.packages("glue", dependencies = FALSE)
install.packages("C:/Users/kaize/Downloads/glue_1.8.0.zip", repos = NULL, type = "win.binary")
library("sf")
library("gtsummary")
setwd("C:/Users/kaize/OneDrive/Bureau/Master2_GEODYM/Indicateurs")
setwd("C:/Users/kaize/OneDrive/Bureau/Master2_GEODYM/Indicateurs")
detach("package:glue", unload = TRUE)
install.packages("glue")
install.packages("glue")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/kaize/OneDrive/Bureau/Master2_GEODYM/Indicateurs")
remove.packages("glue")
setwd("C:/Users/kaize/OneDrive/Bureau/Master2_GEODYM/Indicateurs")
remove.packages("glue")
install.packages("C:/Users/kaize/Downloads/glue_1.8.0.zip", repos = NULL, type = "win.binary")
#install.packages(c("FactoMineR", "factoextra"))
#install.packages("RColorBrewer")
#install.packages("cartography")
#install.packages("classint")
#install.packages("ggplot2")
#install.packages("corrplot","sf")
#install.packages("gtsummary")
library("dplyr")
library("FactoMineR")
library("factoextra")
library ("corrplot")
library ("readxl")
library ("cartography")
library("rgdal")
library("classInt")
library("RColorBrewer")
library("ggplot2")
library("sf")
library("gtsummary")
setwd("C:/Users/kaize/OneDrive/Bureau/Master2_GEODYM/Indicateurs")
remove.packages("glue")
#install.packages(c("FactoMineR", "factoextra"))
#install.packages("RColorBrewer")
#install.packages("cartography")
#install.packages("classint")
#install.packages("ggplot2")
#install.packages("corrplot","sf")
#install.packages("gtsummary")
library("dplyr")
library("FactoMineR")
library("factoextra")
library ("corrplot")
library ("readxl")
library ("cartography")
library("rgdal")
library("classInt")
library("RColorBrewer")
library("ggplot2")
library("sf")
library("gtsummary")
setwd("C:/Users/kaize/OneDrive/Bureau/Master2_GEODYM/Indicateurs")
remove.packages("gtsummary")
#install.packages(c("FactoMineR", "factoextra"))
#install.packages("RColorBrewer")
#install.packages("cartography")
#install.packages("classint")
#install.packages("ggplot2")
#install.packages("corrplot","sf")
#install.packages("gtsummary")
library("dplyr")
library("FactoMineR")
library("factoextra")
library ("corrplot")
library ("readxl")
library ("cartography")
library("rgdal")
library("classInt")
library("RColorBrewer")
library("ggplot2")
library("sf")
library("gtsummary")
install.packages("C:/Users/kaize/Downloads/gtsummary_2.0.3.zip", repos = NULL, type = "win.binary")
library("gtsummary")
library("gtsummary")
library("gtsummary")
library("gtsummary")
library("gtsummary")
library("gtsummary")
library("gtsummary")
#install.packages(c("FactoMineR", "factoextra"))
#install.packages("RColorBrewer")
#install.packages("cartography")
#install.packages("classint")
#install.packages("ggplot2")
#install.packages("corrplot","sf")
install.packages("summarytools")
library("dplyr")
library("FactoMineR")
library("factoextra")
library ("corrplot")
library ("readxl")
library ("cartography")
library("rgdal")
library("classInt")
library("RColorBrewer")
library("ggplot2")
library("sf")
library("summarytools")
datadeps2 <- read.csv2("datadeps2.csv", encoding = "UTF-8" )
View(datadeps2)
head(datadeps2)
datadeps_active<-datadeps2[1:96,2:10]
rownames(datadeps_active) <- datadeps_active$LIBGEO #On met le code départemental en intitulé du nom de ligne#
select (datadeps2, 3:10) %>% slice(1:96)%>% tbl_summary()
dfSummary(datadeps2)
dfSummary(datadeps2, 3:10) %>% slice(1:96)%>%
install.packages("tableone", dependencies = FALSE)
library(tableone)
# Assuming datadeps2 is your data frame
summary_output <- dfSummary(datadeps2, 3:10)
# Summarize the dataset with appropriate rounding
summary_output <- dfSummary(datadeps2,
round.digits = 2,  # Set to a whole number
varnames = names(datadeps2)[3:10])
# Summarize the dataset with appropriate rounding
summary_output <- dfSummary(datadeps2,
round.digits = 2,  # Set to a whole number
varnames = names(datadeps2)[3:10])
# Slice the first 96 rows if applicable
final_output <- summary_output %>%
slice(1:96) %>%
as.data.frame()  # Convert back to a data frame if necessary
# Print or view the final output
print(final_output)
View(final_output)
View(summary_output)
select (datadeps2, 3:10) %>% slice(1:96)%>% tbl_summary()
scores = cbind(datadeps2[1:96,1:2], as.data.frame(pca1$x))
select (datadeps2, 3:10) %>% slice(1:96)%>% tbl_summary()
select (datadeps2, 3:10) %>% slice(1:96)%>% tbl_summary()
install.packages("gtsummary")
install.packages("gtsummary")
knitr::opts_chunk$set(echo = TRUE)
# Print or display the summary
print(summary_output)
# Select columns 3 to 10 and slice the first 96 rows
summary_output <- datadeps2 %>%
select(3:10) %>%
slice(1:96) %>%
tbl_summary()
library("gtsummary")
datadeps2 <- read.csv2("datadeps2.csv", encoding = "UTF-8" )
View(datadeps2)
head(datadeps2)
datadeps_active<-datadeps2[1:96,2:10]
rownames(datadeps_active) <- datadeps_active$LIBGEO #On met le code départemental en intitulé du nom de ligne#
select (datadeps2, 3:10) %>% slice(1:96)%>% tbl_summary()
library("dplyr")
select (datadeps2, 3:10) %>% slice(1:96)%>% tbl_summary()
pca1 = prcomp(datadeps_active[,2:9], scale. = TRUE)
pca1$sdev
summary(pca1)
pca1$rotation
head(pca1$x)
biplot(prcomp(datadeps_active[,2:9], scale=TRUE))
scores = cbind(datadeps2[1:96,1:2], as.data.frame(pca1$x))
scores = cbind(datadeps2[1:96,1:2], as.data.frame(pca1$x))
ggplot(data = scores, aes(x = PC1, y = PC3, label = scores$LIBGEO)) +
geom_hline(yintercept = 0, colour = "gray65") +
geom_vline(xintercept = 0, colour = "gray65") +
geom_text(colour = "tomato", alpha = 0.8, size = 4) +
ggtitle("ACP sur données sociales des départements français")
library(ggplot2)
ggplot(data = scores, aes(x = PC1, y = PC3, label = scores$LIBGEO)) +
geom_hline(yintercept = 0, colour = "gray65") +
geom_vline(xintercept = 0, colour = "gray65") +
geom_text(colour = "tomato", alpha = 0.8, size = 4) +
ggtitle("ACP sur données sociales des départements français")
datadeps_active<-datadeps_active[,2:9]#on retire la colonne inutile
rownames(datadeps_active) <- datadeps2$LIBGEO[1:96] #On remet le code départemental en intitulé du nom de ligne#
resPCA<- PCA(datadeps_active, scale.unit = TRUE, ncp = 5, graph = TRUE)
library("dplyr")
library("FactoMineR")
library("factoextra")
library ("corrplot")
library ("readxl")
library ("cartography")
library("rgdal")
library("classInt")
library("RColorBrewer")
library("ggplot2")
library("sf")
library("gtsummary")
datadeps_active<-datadeps_active[,2:9]#on retire la colonne inutile
datadeps_active<-datadeps_active[,2:9]#on retire la colonne inutile
datadeps_active<-datadeps_active[,2:7]#on retire la colonne inutile
rownames(datadeps_active) <- datadeps2$LIBGEO[1:96] #On remet le code départemental en intitulé du nom de ligne#
resPCA<- PCA(datadeps_active, scale.unit = TRUE, ncp = 5, graph = TRUE)
print(resPCA)
summary(resPCA, nbelements=Inf)  ## donne toutes les sorties
resPCA$var
resPCA$var$contrib
#matrice des corrélations des varialbes#
corrplot(resPCA$var$cos2, is.corr=FALSE)
#graphiques#
fviz_eig(resPCA, addlabels = TRUE, ylim = c(0, 50))
fviz_contrib(resPCA, choice = "var", axes = 1, top = 10)
fviz_contrib(resPCA, choice = "var", axes = 2, top = 10)
fviz_pca_var(resPCA, col.var = "black")
fviz_pca_var(resPCA, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
#individus#
ind <- get_pca_ind(resPCA)
ind
fviz_pca_ind (resPCA, axes= c(1,3),addlabels = TRUE, label="ind")
plot.PCA(resPCA,  axes=c(1, 3), choix="ind")
plot.PCA(resPCA, cex=0.6, axes=c(1, 3), choix="ind")
plot.PCA(resPCA, cex=0.6, shadow=TRUE, axes=c(2, 3), choix="ind")
plot.PCA(resPCA, cex=0.6, shadow=TRUE, axes=c(1, 2), choix="ind")
### Assignation d'un nom de variable facilement manipulable et reconnaissable
# Import du fond de carte
Fondep <- readOGR(dsn = ".", layer= "depFrmetro")
install.packages("C:/Users/kaize/Downloads/rgdal_1.5-25.tar.gz", repos = NULL, type = "source")
install.packages("rgdal")
library("rgdal")
install.packages("rgdal", dependencies = TRUE)
library("rgdal")
install.packages("sf", dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library("sf")
library("rgdal")
#install.packages(c("FactoMineR", "factoextra"))
#install.packages("RColorBrewer")
#install.packages("cartography")
#install.packages("classint")
#install.packages("ggplot2")
#install.packages("corrplot","sf")
install.packages("rgdal", dependencies = TRUE)
install.packages("C:/Users/kaize/Downloads/rgdal_1.2-8.tar.gz", repos = NULL, type = "source")
install.packages("sp", dependencies = FALSE)
library(sp)
library(spatstat.data)
library(spatstat.explore)
install.packages("rgdal", dependencies = TRUE)
library(rgl)
install.packages("C:/Users/kaize/Downloads/rgdal_1.2-8.tar.gz", repos = NULL, type = "source")
options(repos = c(CRAN = "https://cloud.r-project.org/"))  # Set a CRAN mirror
install.packages("rgdal", dependencies = TRUE)
install.packages("C:/Users/kaize/Downloads/rgdal_0.5-9.tar.gz", repos = NULL, type = "source")
setwd("C:/Users/kaize/OneDrive/Bureau/Master2_GEODYM/Indicateurs")
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
library(FlowScreen)
data(caniapiscau)
head(caniapiscau)
head(caniapiscau)
# Caraceristuq data
str(caniapiscau)
# Plot data
plot(caniapiscau)
save.image("C:\\Users\\kaize\\OneDrive\\Bureau\\Master2_GEODYM\\Aléas & Risuqes\\.RData")
q()
setwd("C:/Users/kaize/OneDrive/Bureau/Master2_GEODYM/Webmapping/Rendu/Terrorisme")
install.packages(c("shiny", "shinydashboard", "leaflet", "sf", "dplyr", "ggplot2", "plotly"))
# Chargement des bibliothèques nécessaires
library(shiny)
library(shinydashboard)
library(leaflet)
library(sf)
library(dplyr)
library(plotly)
terrorisme_data <- tryCatch({
# Chargement du shapefile
data <- st_read("C:/Users/kaize/OneDrive/Bureau/Master2_GEODYM/Webmapping/Rendu/Terrorisme/Terrorisme.shp") %>%
na.omit()
# Chargement des données
terrorisme_data <- tryCatch({
data <- st_read("C:/Users/kaize/OneDrive/Bureau/Master2_GEODYM/Webmapping/Rendu/Terrorisme/Terrorisme.shp") %>%
na.omit()
# Vérification et harmonisation des colonnes
data$Pays <- trimws(tolower(data$Pays))  # Retirer les espaces et mettre en minuscule
data$Typ_violen <- trimws(tolower(data$Typ_violen))  # Uniformiser les types de violence
data$latitude <- as.numeric(data$latitude)  # Convertir latitude en numérique
data$longitude <- as.numeric(data$longitude)  # Convertir longitude en numérique
data$Annee <- as.numeric(data$Annee)  # Convertir Année en numérique
data$Nbre_morts <- as.numeric(data$Nbre_morts)  # Convertir Nombre de morts en numérique
data  # Retourner les données traitées
}, error = function(e) {
showNotification("Erreur lors du chargement du shapefile : vérifiez le chemin ou le format.", type = "error")
NULL
})
# Chargement des données
terrorisme_data <- tryCatch({
data <- st_read("C:/Users/kaize/OneDrive/Bureau/Master2_GEODYM/Webmapping/Rendu/Terrorisme/Terrorisme.shp") %>%
na.omit()
# Vérification et harmonisation des colonnes
data$Pays <- trimws(tolower(data$Pays))  # Retirer les espaces et mettre en minuscule
data$Typ_violen <- trimws(tolower(data$Typ_violen))  # Uniformiser les types de violence
data$latitude <- as.numeric(data$latitude)  # Convertir latitude en numérique
data$longitude <- as.numeric(data$longitude)  # Convertir longitude en numérique
data$Annee <- as.numeric(data$Annee)  # Convertir Année en numérique
data$Nbre_morts <- as.numeric(data$Nbre_morts)  # Convertir Nombre de morts en numérique
data  # Retourner les données traitées
}, error = function(e) {
showNotification("Erreur lors du chargement du shapefile : vérifiez le chemin ou le format.", type = "error")
NULL
})
runApp('App_Visualisation-Actes-Terro-Afrique.R')
runApp('App_Visualisation-Actes-Terro-Afrique.R')
runApp('App_Visualisation-Actes-Terro-Afrique.R')
runApp('App_Visualisation-Actes-Terro-Afrique.R')
runApp('App_Visualisation-Actes-Terro-Afrique.R')
runApp('App_Visualisation-Actes-Terro-Afrique.R')
